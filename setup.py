#!/usr/bin/env python3
"""
Script de configura√ß√£o inicial para o projeto FiLL Backend
"""

import os
import sys
import subprocess
import sqlite3
from pathlib import Path

def print_step(step, description):
    print(f"\n{'='*50}")
    print(f"PASSO {step}: {description}")
    print(f"{'='*50}")

def run_command(command, description):
    print(f"\nExecutando: {description}")
    print(f"Comando: {command}")
    
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - Sucesso!")
        if result.stdout:
            print(f"Sa√≠da: {result.stdout}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - Erro!")
        print(f"Erro: {e.stderr}")
        return False

def check_python_version():
    print_step(1, "VERIFICANDO VERS√ÉO DO PYTHON")
    
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print(f"‚ùå Python {version.major}.{version.minor} detectado.")
        print("   Requerido: Python 3.8 ou superior")
        return False
    
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK!")
    return True

def install_dependencies():
    print_step(2, "INSTALANDO DEPEND√äNCIAS")
    
    if not os.path.exists("requirements.txt"):
        print("‚ùå Arquivo requirements.txt n√£o encontrado!")
        return False
    
    return run_command("pip install -r requirements.txt", "Instala√ß√£o de depend√™ncias")

def create_database():
    print_step(3, "CRIANDO BANCO DE DADOS")
    
    try:
        # Importar e criar as tabelas
        from database import Base, engine
        Base.metadata.create_all(bind=engine)
        print("‚úÖ Banco de dados SQLite criado com sucesso!")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar banco de dados: {e}")
        return False

def test_imports():
    print_step(4, "TESTANDO IMPORTA√á√ïES")
    
    modules = [
        "fastapi",
        "uvicorn",
        "stellar_sdk",
        "pydantic",
        "sqlalchemy"
    ]
    
    all_ok = True
    for module in modules:
        try:
            __import__(module)
            print(f"‚úÖ {module} - OK!")
        except ImportError as e:
            print(f"‚ùå {module} - Erro: {e}")
            all_ok = False
    
    return all_ok

def create_directories():
    print_step(5, "CRIANDO DIRET√ìRIOS NECESS√ÅRIOS")
    
    directories = ["logs", "data"]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"‚úÖ Diret√≥rio {directory}/ criado")

def show_next_steps():
    print_step(6, "PR√ìXIMOS PASSOS")
    
    print("""
üöÄ Configura√ß√£o conclu√≠da! Pr√≥ximos passos:

1. Executar a aplica√ß√£o:
   python main.py

2. Acessar a documenta√ß√£o:
   - Swagger UI: http://localhost:8000/docs
   - ReDoc: http://localhost:8000/redoc

3. Testar a API:
   python exemplo_uso.py

4. Para desenvolvimento:
   - Configure as chaves Stellar em config.py
   - Ajuste as configura√ß√µes conforme necess√°rio

üìö Documenta√ß√£o completa no README.md
""")

def main():
    print("üîß CONFIGURA√á√ÉO INICIAL - FILL BACKEND")
    print("Sistema de Financiamento Veicular com Integra√ß√£o Stellar")
    
    # Verifica√ß√µes e configura√ß√µes
    steps = [
        check_python_version,
        install_dependencies,
        create_database,
        test_imports,
        create_directories
    ]
    
    all_success = True
    for step in steps:
        if not step():
            all_success = False
            break
    
    if all_success:
        show_next_steps()
        print("\n‚úÖ Configura√ß√£o conclu√≠da com sucesso!")
    else:
        print("\n‚ùå Configura√ß√£o falhou. Verifique os erros acima.")
        sys.exit(1)

if __name__ == "__main__":
    main()
