#!/usr/bin/env python3
"""
Script para ativar conex√£o real com a rede Stellar Testnet
"""

import os
import sys
from stellar_sdk import Server, Keypair
from stellar_sdk.exceptions import NotFoundError

def verificar_conexao_stellar():
    """Verifica se as chaves Stellar est√£o funcionando na testnet"""
    
    print("üîç Verificando conex√£o com a rede Stellar Testnet...")
    
    # Carregar vari√°veis de ambiente
    from dotenv import load_dotenv
    load_dotenv('environment.env')
    
    # Obter chaves
    issuer_secret = os.getenv("STELLAR_ISSUER_SECRET")
    financiador_secret = os.getenv("STELLAR_FINANCIADOR_SECRET")
    
    if not issuer_secret or not financiador_secret:
        print("‚ùå Chaves Stellar n√£o encontradas no arquivo environment.env")
        return False
    
    try:
        # Criar keypairs
        issuer_keypair = Keypair.from_secret(issuer_secret)
        financiador_keypair = Keypair.from_secret(financiador_secret)
        
        print(f"‚úÖ Chaves carregadas:")
        print(f"   Issuer: {issuer_keypair.public_key}")
        print(f"   Financiador: {financiador_keypair.public_key}")
        
        # Conectar ao servidor testnet
        server = Server("https://horizon-testnet.stellar.org")
        
        # Verificar se as contas existem
        try:
            issuer_account = server.load_account(issuer_keypair.public_key)
            print(f"‚úÖ Conta Issuer ativa na testnet")
            print(f"   Saldo: {issuer_account.balances}")
        except NotFoundError:
            print(f"‚ö†Ô∏è  Conta Issuer n√£o encontrada - precisa de XLM para ativa√ß√£o")
            print(f"   Use o Friendbot: https://friendbot.stellar.org/?addr={issuer_keypair.public_key}")
        
        try:
            financiador_account = server.load_account(financiador_keypair.public_key)
            print(f"‚úÖ Conta Financiador ativa na testnet")
            print(f"   Saldo: {financiador_account.balances}")
        except NotFoundError:
            print(f"‚ö†Ô∏è  Conta Financiador n√£o encontrada - precisa de XLM para ativa√ß√£o")
            print(f"   Use o Friendbot: https://friendbot.stellar.org/?addr={financiador_keypair.public_key}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar conex√£o: {e}")
        return False

def ativar_conexao_real():
    """Ativa a conex√£o real com a testnet no c√≥digo"""
    
    print("\nüîß Ativando conex√£o real com a testnet...")
    
    # Ler o arquivo stellar_service.py
    with open('stellar_service.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Verificar se j√° est√° ativado
    if 'response = self.server.submit_transaction(transaction)' in content:
        print("‚úÖ Conex√£o real j√° est√° ativada!")
        return True
    
    # Ativar conex√£o real
    content = content.replace(
        '# Para demonstra√ß√£o, simular transa√ß√£o sem conectar √† rede real\n            # Em produ√ß√£o, descomente o c√≥digo abaixo para conectar √† rede Stellar\n            """',
        '# Conex√£o real com a rede Stellar ativada\n            # Descomentado para usar testnet real'
    )
    
    content = content.replace(
        '"""\n            \n            # Simula√ß√£o para demonstra√ß√£o',
        '\n            # C√≥digo real ativado - conectando √† testnet'
    )
    
    content = content.replace(
        'simulated_tx_id = hashlib.md5(f"financiamento_{financiamento_id}_{datetime.now()}".encode()).hexdigest()\n            \n            return {\n                "success": True,\n                "transaction_id": simulated_tx_id,\n                "message": f"Financiamento {financiamento_id} aprovado com sucesso na rede Stellar (SIMULADO)",\n                "contract_data": contract_data\n            }',
        'response = self.server.submit_transaction(transaction)\n            \n            return {\n                "success": True,\n                "transaction_id": response["id"],\n                "message": f"Financiamento {financiamento_id} aprovado com sucesso na rede Stellar",\n                "contract_data": contract_data\n            }'
    )
    
    # Salvar arquivo modificado
    with open('stellar_service.py', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ Conex√£o real ativada no c√≥digo!")
    return True

def main():
    print("üöÄ ATIVA√á√ÉO DA CONEX√ÉO STELLAR REAL")
    print("=" * 50)
    
    # Verificar conex√£o
    if not verificar_conexao_stellar():
        print("\n‚ùå Falha na verifica√ß√£o. Verifique as chaves no environment.env")
        return
    
    # Ativar conex√£o real
    if ativar_conexao_real():
        print("\nüéâ CONEX√ÉO REAL ATIVADA COM SUCESSO!")
        print("\nüìã Pr√≥ximos passos:")
        print("1. Instale a depend√™ncia: pip install python-dotenv")
        print("2. Execute: python main.py")
        print("3. Teste a API: python exemplo_uso.py")
        print("\n‚ö†Ô∏è  ATEN√á√ÉO: Agora as transa√ß√µes ser√£o reais na testnet!")
    else:
        print("\n‚ùå Falha ao ativar conex√£o real")

if __name__ == "__main__":
    main()
