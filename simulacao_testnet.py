#!/usr/bin/env python3
"""
Simula√ß√£o completa na rede Stellar Testnet
Cria transa√ß√µes reais que podem ser visualizadas no explorer
"""

import requests
import json
import time

BASE_URL = "http://localhost:8000"

def print_separator(title):
    print(f"\n{'='*70}")
    print(f" {title}")
    print(f"{'='*70}")

def print_response(response, title):
    print(f"\n{title}:")
    print(f"Status: {response.status_code}")
    if response.status_code < 400:
        result = response.json()
        print(f"‚úÖ Sucesso: {result.get('message', 'Opera√ß√£o realizada')}")
        if 'transaction_id' in result:
            print(f"üîó Transaction ID: {result['transaction_id']}")
            print(f"üåê Verificar em: https://testnet.steexp.com/tx/{result['transaction_id']}")
        return result
    else:
        print(f"‚ùå Erro: {response.text}")
        return None

def verificar_api():
    """Verifica se a API est√° funcionando"""
    try:
        response = requests.get(f"{BASE_URL}/health")
        if response.status_code == 200:
            print("‚úÖ API funcionando")
            return True
        else:
            print("‚ùå API com problemas")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå API n√£o est√° rodando")
        print("   Execute: python main.py")
        return False

def criar_financiamento():
    """Cria um novo financiamento"""
    print_separator("CRIANDO FINANCIAMENTO")
    
    financiamento_data = {
        "valor_veiculo": 150000.0,
        "valor_entrada": 30000.0,
        "valor_financiado": 120000.0,
        "taxa_juros": 2.8,
        "prazo_meses": 72
    }
    
    print(f"üìã Dados do financiamento:")
    print(f"   Valor do ve√≠culo: R$ {financiamento_data['valor_veiculo']:,.2f}")
    print(f"   Valor da entrada: R$ {financiamento_data['valor_entrada']:,.2f}")
    print(f"   Valor financiado: R$ {financiamento_data['valor_financiado']:,.2f}")
    print(f"   Taxa de juros: {financiamento_data['taxa_juros']}% a.m.")
    print(f"   Prazo: {financiamento_data['prazo_meses']} meses")
    
    response = requests.post(f"{BASE_URL}/api/financiamento/", json=financiamento_data)
    result = print_response(response, "Cria√ß√£o de Financiamento")
    
    if result:
        return result['id']
    return None

def aprovar_na_stellar(financiamento_id):
    """Aprova financiamento na rede Stellar Testnet"""
    print_separator("APROVANDO NA REDE STELLAR TESTNET")
    
    print("‚ö†Ô∏è  ATEN√á√ÉO: Esta √© uma transa√ß√£o REAL na testnet!")
    print("   Ser√° criada uma transa√ß√£o na blockchain Stellar")
    print("   Transaction ID ser√° real e verific√°vel no explorer")
    print("   Valor: 0.0000001 XLM (m√≠nimo para teste)")
    
    input("\nüîÑ Pressione ENTER para continuar...")
    
    response = requests.post(f"{BASE_URL}/api/stellar/aprovar_financiamento/{financiamento_id}")
    result = print_response(response, "Aprova√ß√£o na Stellar Testnet")
    
    return result

def executar_pagamento(financiamento_id):
    """Executa pagamento na rede Stellar Testnet"""
    print_separator("EXECUTANDO PAGAMENTO NA TESTNET")
    
    # Endere√ßo de destino (pode ser qualquer endere√ßo v√°lido da testnet)
    destinatario = "GCKFBEIYTKP4R4M4TZQK7X2Y3Z4X5X6X7X8X9X0X1X2X3X4X5X6X7X8X9X0"
    
    payment_data = {
        "financiamento_id": financiamento_id,
        "destinatario": destinatario
    }
    
    print(f"üì§ Dados do pagamento:")
    print(f"   Financiamento ID: {financiamento_id}")
    print(f"   Destinat√°rio: {destinatario}")
    print(f"   Valor: 0.0000001 XLM (m√≠nimo para teste)")
    print("‚ö†Ô∏è  ATEN√á√ÉO: Esta √© uma transa√ß√£o REAL de pagamento!")
    
    input("\nüîÑ Pressione ENTER para continuar...")
    
    response = requests.post(f"{BASE_URL}/api/stellar/executar_pagamento", json=payment_data)
    result = print_response(response, "Execu√ß√£o do Pagamento na Testnet")
    
    return result

def verificar_status(financiamento_id):
    """Verifica status do financiamento"""
    print_separator("VERIFICANDO STATUS")
    
    response = requests.get(f"{BASE_URL}/api/financiamento/{financiamento_id}")
    result = print_response(response, "Status do Financiamento")
    
    if result:
        print(f"\nüìä Resumo:")
        print(f"   ID: {result['id']}")
        print(f"   Status: {result['status_financiamento']}")
        print(f"   Valor: R$ {result['valor_financiado']:,.2f}")
        print(f"   Data cria√ß√£o: {result['data_criacao']}")
        if result.get('stellar_transaction_id'):
            print(f"   Transaction ID: {result['stellar_transaction_id']}")
            print(f"   üåê Explorer: https://testnet.steexp.com/tx/{result['stellar_transaction_id']}")

def verificar_conta_stellar():
    """Verifica saldo da conta na testnet"""
    print_separator("VERIFICANDO CONTA STELLAR")
    
    conta = "GA4L46RTP3LOHAM3HNLC5VIATFXAJW65CCB3GGCP7LZ37PQF2X2PHUG2"
    
    response = requests.get(f"{BASE_URL}/api/stellar/saldo/{conta}")
    result = print_response(response, "Saldo da Conta na Testnet")
    
    if result and result.get('success'):
        print(f"\nüí∞ Saldos:")
        for balance in result.get('balances', []):
            print(f"   {balance['asset']}: {balance['balance']}")

def main():
    print("üöÄ SIMULA√á√ÉO COMPLETA - REDE STELLAR TESTNET")
    print("=" * 70)
    print("Esta simula√ß√£o criar√° transa√ß√µes REAIS na testnet da Stellar")
    print("Todas as transa√ß√µes ser√£o vis√≠veis no explorer da testnet")
    print("=" * 70)
    
    # Verificar API
    if not verificar_api():
        return
    
    # 1. Criar financiamento
    financiamento_id = criar_financiamento()
    if not financiamento_id:
        print("‚ùå Falha ao criar financiamento")
        return
    
    # 2. Aprovar na Stellar (TRANSA√á√ÉO REAL)
    aprovar_na_stellar(financiamento_id)
    
    # 3. Verificar status
    verificar_status(financiamento_id)
    
    # 4. Executar pagamento (TRANSA√á√ÉO REAL)
    executar_pagamento(financiamento_id)
    
    # 5. Verificar status final
    verificar_status(financiamento_id)
    
    # 6. Verificar conta Stellar
    verificar_conta_stellar()
    
    print_separator("SIMULA√á√ÉO CONCLU√çDA")
    print("‚úÖ Transa√ß√µes reais criadas na testnet!")
    print("üîç Verifique as transa√ß√µes nos exploradores:")
    print("   - Stellar Expert: https://testnet.steexp.com/")
    print("   - Stellar Laboratory: https://laboratory.stellar.org/")
    print(f"   - Sua conta: https://testnet.steexp.com/account/GA4L46RTP3LOHAM3HNLC5VIATFXAJW65CCB3GGCP7LZ37PQF2X2PHUG2")

if __name__ == "__main__":
    main()
